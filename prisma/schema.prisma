// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// ========================================
// CORE ENTITIES
// ========================================

model Building {
  id            String @id @default(cuid())
  name          String
  address       String
  city          String
  state         String
  zipCode       String
  floors        Int    @default(10) // Default 10 floors
  unitsPerFloor Int    @default(8) // Default A-H units

  units        Unit[]
  issues       Issue[]
  petitions    Petition[]
  meetings     Meeting[]
  unitRequests UnitRequest[]
  communicationTemplates CommunicationTemplate[]
  documents    Document[]
  documentFolders DocumentFolder[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BuildingRole BuildingRole[]
  permissions  AdminPermission[]

  @@index([city, state])
}

model Unit {
  id         String @id @default(cuid())
  buildingId String
  floor      Int // 1-10
  line       String // A-H
  unitNumber String // Combined like "5B"

  building     Building      @relation(fields: [buildingId], references: [id])
  tenancies    Tenancy[]
  issues       Issue[]
  unitRequests UnitRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buildingId, unitNumber])
  @@index([buildingId])
  @@index([floor])
  @@index([line])
}

model User {
  id        String  @id @default(cuid())
  clerkId   String  @unique
  email     String
  firstName String?
  lastName  String?
  phone     String?

  // Privacy settings
  shareContactInfo      Boolean @default(false)
  allowNeighborMessages Boolean @default(false)
  publicIssuesByDefault Boolean @default(false)

  // Roles at building level
  buildingRoles BuildingRole[]

  // Relationships
  tenancies          Tenancy[]
  reportedIssues     Issue[]
  communications     Communication[]
  signatures         Signature[]
  meetingAttendances MeetingAttendance[]
  comments           Comment[]
  unitRequests       UnitRequest[]
  processedRequests  UnitRequest[] @relation("ProcessedRequests")
  
  // Admin permissions
  permissions        AdminPermission[] @relation("UserPermissions")
  grantedPermissions AdminPermission[] @relation("GrantedPermissions")
  
  // Communication templates
  createdTemplates   CommunicationTemplate[]
  
  // Documents
  uploadedDocuments  Document[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Petition  Petition[]
  Meeting   Meeting[]

  @@index([clerkId])
  @@index([email])
}

model BuildingRole {
  id         String @id @default(cuid())
  userId     String
  buildingId String
  role       Role

  user     User     @relation(fields: [userId], references: [id])
  building Building @relation(fields: [buildingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, buildingId, role])
  @@index([userId])
  @@index([buildingId])
}

enum Role {
  TENANT
  ASSOCIATION_ADMIN
  BUILDING_ADMIN
}

// Tracks which units a user has lived in and when
model Tenancy {
  id        String    @id @default(cuid())
  userId    String
  unitId    String
  startDate DateTime
  endDate   DateTime?
  isCurrent Boolean   @default(true)

  user User @relation(fields: [userId], references: [id])
  unit Unit @relation(fields: [unitId], references: [id])
  
  // Documents specific to this tenancy
  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([unitId])
  @@index([isCurrent])
  @@index([startDate, endDate])
}

// Unit request tracking for admin approval workflow
model UnitRequest {
  id         String   @id @default(cuid())
  userId     String
  buildingId String
  unitId     String?  // Specific unit requested, null if any unit
  
  status     UnitRequestStatus @default(PENDING)
  message    String? @db.Text // Optional message from tenant
  adminNotes String? @db.Text // Notes from admin when approving/rejecting
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id])
  building      Building @relation(fields: [buildingId], references: [id])
  requestedUnit Unit?    @relation(fields: [unitId], references: [id])
  
  processedBy   String?
  processedByUser User? @relation("ProcessedRequests", fields: [processedBy], references: [id])
  processedAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([buildingId])
  @@index([status])
  @@index([createdAt])
}

enum UnitRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// ========================================
// ISSUE TRACKING
// ========================================

model Issue {
  id         String @id @default(cuid())
  buildingId String
  unitId     String
  reporterId String

  title       String
  description String        @db.Text
  category    IssueCategory
  severity    IssueSeverity
  status      IssueStatus   @default(OPEN)
  location    String        @default("other")

  // Privacy
  isPublic Boolean @default(true)

  // AI features
  embedding           Unsupported("vector(1536)")?
  aiSuggestedCategory IssueCategory?
  aiSuggestedSeverity IssueSeverity?

  // Relationships
  building Building @relation(fields: [buildingId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])
  reporter User     @relation(fields: [reporterId], references: [id])

  media          Media[]
  communications Communication[]
  comments       Comment[]
  documents      IssueDocument[]
  relatedIssues  IssueRelation[] @relation("FromIssue")
  relatedTo      IssueRelation[] @relation("ToIssue")

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  @@index([buildingId])
  @@index([unitId])
  @@index([reporterId])
  @@index([category])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
}

enum IssueCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  STRUCTURAL
  PEST
  SAFETY
  NOISE
  OTHER
}

enum IssueSeverity {
  EMERGENCY // Immediate danger
  HIGH // Major impact on habitability
  MEDIUM // Significant inconvenience
  LOW // Minor issue
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  AWAITING_LANDLORD
  RESOLVED
  CLOSED
}

// For "me too" functionality and linking related issues
model IssueRelation {
  id           String       @id @default(cuid())
  fromIssueId  String
  toIssueId    String
  relationType RelationType

  fromIssue Issue @relation("FromIssue", fields: [fromIssueId], references: [id])
  toIssue   Issue @relation("ToIssue", fields: [toIssueId], references: [id])

  createdAt DateTime @default(now())

  @@unique([fromIssueId, toIssueId])
  @@index([fromIssueId])
  @@index([toIssueId])
}

enum RelationType {
  DUPLICATE
  RELATED
  CAUSED_BY
  ME_TOO
}

// ========================================
// COMMUNICATIONS
// ========================================

model Communication {
  id      String  @id @default(cuid())
  issueId String?
  userId  String

  type          CommunicationType
  direction     CommunicationDirection
  communicationDate DateTime @default(now())
  subject       String?
  content       String    @db.Text

  // Response tracking
  responseReceived Boolean   @default(false)
  responseDate     DateTime?
  responseContent  String?   @db.Text

  // Follow-up tracking
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  followUpCompleted Boolean  @default(false)
  
  // Participants and metadata
  participants  String[] // Array of participant names/roles
  contactName   String?
  contactEmail  String?
  contactPhone  String?
  contactRole   String? // e.g., "Landlord", "Property Manager", "Superintendent"
  
  // Resolution
  resolved      Boolean @default(false)
  resolution    String? @db.Text

  // Relationships
  issue Issue?  @relation(fields: [issueId], references: [id])
  user  User    @relation(fields: [userId], references: [id])
  media Media[]
  documents CommunicationDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([issueId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([communicationDate])
  @@index([followUpRequired])
}

model CommunicationTemplate {
  id          String @id @default(cuid())
  buildingId  String?  // null means global/default template
  name        String
  category    TemplateCategory
  description String?
  
  // Template content
  subject     String
  content     String @db.Text
  
  // Customization options
  placeholders String[] // Array of placeholder keys like ["{UNIT_NUMBER}", "{DATE}", "{TENANT_NAME}"]
  
  // Metadata
  isBuiltIn   Boolean @default(false) // System templates vs user-created
  isActive    Boolean @default(true)
  usageCount  Int     @default(0)
  
  // Relations
  building    Building? @relation(fields: [buildingId], references: [id])
  createdBy   String?
  creator     User?     @relation(fields: [createdBy], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([buildingId])
  @@index([category])
  @@index([isActive])
  @@index([isBuiltIn])
}

enum TemplateCategory {
  MAINTENANCE
  RENT
  LEGAL
  NOISE
  SECURITY
  GENERAL
  FOLLOW_UP
  ESCALATION
}

enum CommunicationType {
  EMAIL
  PHONE_CALL
  TEXT_MESSAGE
  IN_PERSON
  WRITTEN_LETTER
  PORTAL_MESSAGE
}

enum CommunicationDirection {
  SENT // Tenant to landlord
  RECEIVED // Landlord to tenant
}

// ========================================
// MEDIA & ATTACHMENTS
// ========================================

model Media {
  id       String    @id @default(cuid())
  url      String
  type     MediaType
  fileName String
  fileSize Int
  mimeType String

  // Polymorphic association
  issueId         String?
  communicationId String?
  commentId       String?

  issue         Issue?         @relation(fields: [issueId], references: [id])
  communication Communication? @relation(fields: [communicationId], references: [id])
  comment       Comment?       @relation(fields: [commentId], references: [id])

  uploadedBy String
  createdAt  DateTime @default(now())

  @@index([issueId])
  @@index([communicationId])
  @@index([commentId])
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

// ========================================
// COMMUNITY FEATURES
// ========================================

model Petition {
  id          String @id @default(cuid())
  buildingId  String
  createdById String

  title       String
  description String    @db.Text
  demands     String[] // Array of specific demands
  deadline    DateTime?

  status   PetitionStatus @default(OPEN)
  isPublic Boolean        @default(false) // Can be viewed outside building

  building   Building    @relation(fields: [buildingId], references: [id])
  createdBy  User        @relation(fields: [createdById], references: [id])
  signatures Signature[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?

  @@index([buildingId])
  @@index([status])
  @@index([createdAt])
}

enum PetitionStatus {
  DRAFT
  OPEN
  CLOSED
  DELIVERED
}

model Signature {
  id         String  @id @default(cuid())
  petitionId String
  userId     String
  comment    String? @db.Text

  petition Petition @relation(fields: [petitionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([petitionId, userId])
  @@index([petitionId])
  @@index([userId])
}

model Meeting {
  id          String @id @default(cuid())
  buildingId  String
  createdById String

  title        String
  description  String?  @db.Text
  location     String
  scheduledFor DateTime
  duration     Int // in minutes

  agenda      String[] // Array of agenda items
  minutes     String?  @db.Text
  decisions   Json[] // Array of decisions made
  actionItems Json[] // Array of action items

  building    Building            @relation(fields: [buildingId], references: [id])
  createdBy   User                @relation(fields: [createdById], references: [id])
  attendances MeetingAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buildingId])
  @@index([scheduledFor])
}

model MeetingAttendance {
  id         String     @id @default(cuid())
  meetingId  String
  userId     String
  rsvpStatus RSVPStatus
  attended   Boolean    @default(false)

  meeting Meeting @relation(fields: [meetingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meetingId, userId])
  @@index([meetingId])
  @@index([userId])
}

enum RSVPStatus {
  YES
  NO
  MAYBE
}

// ========================================
// COMMENTS & ACTIVITY
// ========================================

model Comment {
  id      String @id @default(cuid())
  issueId String
  userId  String
  content String @db.Text

  issue Issue   @relation(fields: [issueId], references: [id])
  user  User    @relation(fields: [userId], references: [id])
  media Media[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([issueId])
  @@index([userId])
  @@index([createdAt])
}

// ========================================
// AUDIT & ANALYTICS
// ========================================

model AuditLog {
  id         String  @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  metadata   Json?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// ========================================
// LIBRARY & DOCUMENTS
// ========================================

model Document {
  id          String   @id @default(cuid())
  buildingId  String
  uploadedBy  String
  
  // Document metadata
  title       String
  description String?
  category    DocumentCategory
  visibility  DocumentVisibility
  
  // File information
  fileUrl     String   // Vercel Blob URL
  fileName    String
  fileType    String   // MIME type
  fileSize    Int      // bytes
  
  // Organization
  tags        String[]
  folderId    String?
  
  // For tenant-specific documents
  tenancyId   String?  // If TENANT_ONLY visibility
  
  // Versioning
  version     Int      @default(1)
  previousVersionId String?
  
  // Metadata
  downloadCount Int    @default(0)
  lastAccessedAt DateTime?
  expiresAt    DateTime?
  isActive    Boolean @default(true)
  
  // Relations
  building    Building @relation(fields: [buildingId], references: [id])
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  folder      DocumentFolder? @relation(fields: [folderId], references: [id])
  tenancy     Tenancy? @relation(fields: [tenancyId], references: [id])
  previousVersion Document? @relation("DocumentVersions", fields: [previousVersionId], references: [id])
  nextVersions    Document[] @relation("DocumentVersions")
  
  // Many-to-many relations
  relatedIssues        IssueDocument[]
  relatedCommunications CommunicationDocument[]
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([buildingId])
  @@index([visibility])
  @@index([category])
  @@index([tenancyId])
  @@index([uploadedBy])
}

model DocumentFolder {
  id          String   @id @default(cuid())
  buildingId  String
  name        String
  description String?
  parentId    String?
  visibility  DocumentVisibility
  
  // Relations
  building    Building @relation(fields: [buildingId], references: [id])
  parent      DocumentFolder? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    DocumentFolder[] @relation("FolderHierarchy")
  documents   Document[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([buildingId])
  @@index([parentId])
}

// Junction tables for document relationships
model IssueDocument {
  issueId    String
  documentId String
  addedBy    String
  addedAt    DateTime @default(now())
  
  issue      Issue    @relation(fields: [issueId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
  
  @@id([issueId, documentId])
  @@index([issueId])
  @@index([documentId])
}

model CommunicationDocument {
  communicationId String
  documentId      String
  addedBy         String
  addedAt         DateTime @default(now())
  
  communication   Communication @relation(fields: [communicationId], references: [id])
  document        Document      @relation(fields: [documentId], references: [id])
  
  @@id([communicationId, documentId])
  @@index([communicationId])
  @@index([documentId])
}

// ========================================
// ADMIN & PERMISSIONS
// ========================================

model AdminPermission {
  id         String    @id @default(cuid())
  userId     String
  buildingId String
  permission String    // e.g., "manage_issues", "view_all_tenants"
  
  grantedBy  String    // User who granted this permission
  grantedAt  DateTime  @default(now())
  expiresAt  DateTime? // Optional expiration for temporary permissions
  
  // Relations
  user       User      @relation("UserPermissions", fields: [userId], references: [id])
  building   Building  @relation(fields: [buildingId], references: [id])
  granter    User      @relation("GrantedPermissions", fields: [grantedBy], references: [id])
  
  @@unique([userId, buildingId, permission])
  @@index([userId, buildingId])
  @@index([permission])
  @@index([expiresAt])
}

model PermissionAuditLog {
  id         String   @id @default(cuid())
  userId     String   // User who was affected
  buildingId String
  permission String
  action     String   // "granted" or "revoked"
  
  performedBy String  // User who performed the action
  reason      String? // Optional reason for the change
  metadata    Json?   // Additional context
  
  createdAt DateTime @default(now())
  
  @@index([userId, buildingId])
  @@index([performedBy])
  @@index([createdAt])
}

// ========================================
// ENUMS
// ========================================

enum DocumentCategory {
  // Tenant Information
  TENANT_RIGHTS
  BUILDING_POLICIES
  MAINTENANCE_GUIDES
  LEGAL_FORMS
  
  // Personal Records
  LEASE_AGREEMENT
  RENT_RECEIPTS
  INSURANCE_DOCS
  MOVE_IN_INSPECTION
  PERSONAL_CORRESPONDENCE
  
  // Issue Evidence
  REPAIR_PHOTOS
  DAMAGE_DOCUMENTATION
  INSPECTION_REPORTS
  WORK_ORDERS
  CONTRACTOR_ESTIMATES
  
  // Communication Records
  EMAIL_CORRESPONDENCE
  WRITTEN_NOTICES
  TEXT_SCREENSHOTS
  VOICEMAIL_TRANSCRIPTS
  
  // Administrative
  MEETING_MINUTES
  FINANCIAL_REPORTS
  NEWSLETTERS
  OTHER
  
  // Legal Documentation
  LEGAL_NOTICES
  COURT_DOCUMENTS
  COMPLAINTS_FILED
  
  // Building Information
  BUILDING_RULES
  FLOOR_PLANS
  EMERGENCY_INFO
  AMENITY_GUIDES
  
  // Financial Records
  UTILITY_BILLS
  PAYMENT_HISTORY
  DEPOSIT_RECORDS
  FEE_NOTICES
  
  // Meeting Records
  MEETING_AGENDAS
  PETITIONS
  
  // Resources
  HOW_TO_GUIDES
  TEMPLATES
  CHECKLISTS
}

enum DocumentVisibility {
  PUBLIC
  BUILDING_TENANTS
  TENANT_ONLY
}
